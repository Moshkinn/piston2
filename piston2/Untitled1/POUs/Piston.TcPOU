<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="Piston" Id="{c14a18be-a5d9-43d9-b57d-de6b138fcbb5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Piston
VAR_INPUT
	pSensor		: BOOL; // FWD sensor digital input  
	nSensor 	: BOOL; // BKW sensor digital input
	pistonName 	: STRING;
END_VAR
VAR_OUTPUT
	pOut 		: BOOL; // FWD digital OUT
	nOut 		: BOOL; // BKW digital OUT
	errormessage: STRING(255);
	sState		: STRING; // state of the piston
	isBKW, isFWD, isOFF, isBusy, isError: BOOL; // state indicator
	// outputs are better then properties(for the debugging and HMI in TwinCat)
END_VAR
VAR
	_error 			: BOOL;
	_timeOut 		: TIME:= T#5S; // running the task timeout
	_delay 			: TIME:= T#1S; // in position (on sensor) timeout
	_noSensorTimeout: TIME:= T#2S; // sensor lost in FWD or BKW state
	timeOutTimer, delayTimer, noSensorTimeoutTimer : TON;
	state,task 		: ePiston;
	sTask			: STRING;
	execute			: BOOL; // run method with task input
	trExecute		: R_trig;
	// testing rise error
	testError		: BOOL; 
	
	//STEP mode - no use in this FB
	nextStep		: BOOL;
	stepMode		: BOOL;
	stepPB			: BOOL;
	trStepPB		: R_trig;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[delayTimer(IN:= state=ePiston.running AND 
				(((task=ePiston.bkw) AND nSensor) OR
				((task=ePiston.fwd) AND pSensor)),
 		   PT:=_delay);
////////////////////////////////////////////////////////////////
timeOutTimer(IN:= state=ePiston.running AND
				  (((task=ePiston.bkw) AND NOT nSensor) OR 
				  ((task=ePiston.fwd) AND NOT pSensor)),
			 PT:=_timeOut);
////////////////////////////////////////////////////////////////
noSensorTimeoutTimer(IN:= (state=ePiston.fwd AND NOT pSensor) OR 
						  (state=episton.bkw AND NOT nSensor),
			 		 PT:= _noSensorTimeout );
////////////////////////////////////////////////////////////////
CASE state OF
	ePiston.off: // wait for execute trigger
		M_off();
	ePiston.running:
		IF M_run() THEN
			execute := FALSE;
			M_SetState(task);
		END_IF
	ePiston.fwd: // wait for execute trigger
		M_fwd();
	ePiston.bkw: // wait for execute trigger
		M_bkw();
	ePiston.error: // wait for reset method (from outside)
		M_off();
END_CASE
///////////////////////////////////////////////////////////////////////
statesIndication();
///////////////////////////////////////////////////////////////////////
trExecute(clk:=execute);
IF trExecute.Q AND state<>ePiston.error AND state<>ePiston.running THEN
			M_SetState(ePiston.running);
END_IF
///////////////////////////////////////////////////////////////////////
IF pSensor AND nSensor THEN
	M_riseError('- 2 sensors in one time - not acceptable!');
END_IF
///////////////////////////////////////////////////////////////////////
IF NOT _error AND testError THEN // testing
	M_riseError('- testing error');
END_IF
///////////////////////////////////////////////////////////////////////
// STEP MODE
stepMode := FALSE; // STEP MODE not used
trStepPB(CLK:=stepPB);
nextStep := NOT stepMode OR trStepPB.Q; // for the M_SetState method  
///////////////////////////////////////////////////////////////////////]]></ST>
    </Implementation>
    <Folder Name="PRIVATE" Id="{61449881-cae0-4ebb-b34b-72e2db08101a}" />
    <Folder Name="PUBLIC" Id="{4020de6b-bfe2-4690-90ea-5b2ee17be787}" />
    <Method Name="bkw" Id="{824a11d5-4a48-469b-931c-511dd1b840fd}" FolderPath="PUBLIC\">
      <Declaration><![CDATA[METHOD PUBLIC bkw : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute AND state<>ePiston.error AND state<>ePiston.running
	AND state<>ePiston.bkw
	 THEN
	task := ePiston.bkw;
	execute := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="fwd" Id="{0a956e4d-e0bc-4c11-a9b7-662ed6e9c9a2}" FolderPath="PUBLIC\">
      <Declaration><![CDATA[METHOD PUBLIC fwd : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute AND state<>ePiston.error AND state<>ePiston.running
	AND state<>ePiston.fwd
	 THEN
	task := ePiston.fwd;
	execute := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_bkw" Id="{3af92d9f-7b09-4f80-84a4-104ebc223884}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_bkw : BOOL
VAR_INPUT
END_VAR
VAR
	//bkwState : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pout := FALSE;
nout := TRUE;

IF state=ePiston.bkw AND (noSensorTimeoutTimer.Q OR pSensor) THEN
	M_riseError('- error in BKW - check the sensor');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_fwd" Id="{54d50cd5-59ac-4917-90e2-80082ce6663f}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_fwd : BOOL
VAR_INPUT
END_VAR
VAR
	//fwdState : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pout := TRUE;
nout := FALSE;

IF state=ePiston.fwd AND (noSensorTimeoutTimer.Q OR nSensor) THEN
	M_riseError('- error in FWD - check the sensor');
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_off" Id="{bdccd2e6-762d-498f-b2f6-acc0769d10ce}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_off : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pOut := FALSE;
nOut := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_riseError" Id="{7a55061b-e795-4356-8e11-89a70f30e0ac}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_riseError : BOOL
VAR_INPUT
	message : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[errormessage := CONCAT(pistonName, message);

IF NOT _error THEN
	_error := TRUE;
	M_SetState(episton.error);
	//TODO log with message
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_run" Id="{1d65d539-57ff-42ab-905f-08e897f1c7ef}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_run : BOOL
VAR_INPUT
	//task : INT; // enum
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE task OF
	ePiston.off:
		M_off();
		M_run := TRUE;
	ePiston.bkw:
		M_bkw();
	ePiston.fwd:
		M_fwd();
END_CASE
sTask := stateToString(task);

IF delayTimer.Q THEN
	sTask := '';
	M_run := TRUE;
ELSIF timeOutTimer.Q THEN
	M_riseError(CONCAT('- timeout in the task: ' , stateToString(task)));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetState" Id="{fff2b4ea-d767-4297-83f8-a3b94f560f77}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE M_SetState
VAR_INPUT
	eNextState : ePiston; //INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF State <> eNextState AND nextStep THEN
	//AddEventToLog(State,SeverityLevelType.Info,f_concat9( 'Changing State FROM ', M_statetostring(State), 'TO' ,M_StateToString(eNextState),'','','','',''));
	State := eNextState;
	//stateString := M_statetostring(State);
END_IF
 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="off" Id="{78b1207f-ec0c-4c4c-87dd-ed6889887f33}" FolderPath="PUBLIC\">
      <Declaration><![CDATA[METHOD PUBLIC off : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT execute AND state<>ePiston.error AND state<>ePiston.running 
	AND state<>ePiston.off
	THEN
	task := ePiston.off;
	execute := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="reset" Id="{f4efaf27-7af3-4aa9-a520-b46aadb0ac18}" FolderPath="PUBLIC\">
      <Declaration><![CDATA[METHOD reset : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF state = episton.error OR _error THEN
	M_SetState(ePiston.off);
	execute := FALSE;
	_error := FALSE;
	errormessage := '';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setTimers" Id="{4bdac6d6-8ff1-4608-9e37-15cf81dc8ae2}" FolderPath="PUBLIC\">
      <Declaration><![CDATA[METHOD PUBLIC setTimers : BOOL
VAR_INPUT
	timeOut : TIME; // running the task timeout
	delay : TIME; // in position (on sensor) timeout
	noSensorTimeout : TIME; // sensor lost in FWD or BKW state
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_timeOut			:= timeOut;
_delay				:= delay;
_noSensorTimeout	:= noSensorTimeout;
]]></ST>
      </Implementation>
    </Method>
    <Action Name="statesIndication" Id="{f499436d-ad82-4e21-a113-f5972912f63c}">
      <Implementation>
        <ST><![CDATA[isBKW := state = ePiston.bkw;
isFWD := state = ePiston.fwd;
isOFF := state = ePiston.off;
isBusy := state = ePiston.running;
isError := state = ePiston.error;

sState := stateToString(state);]]></ST>
      </Implementation>
    </Action>
    <Method Name="stateToString" Id="{66c0262a-ead9-42bb-aedb-1a3dcb5e8ca8}" FolderPath="PRIVATE\">
      <Declaration><![CDATA[METHOD PRIVATE stateToString : string
VAR_INPUT
	ePistonState : INT; // ePiston enum
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE ePistonState OF
	ePiston.bkw:
		stateToString := 'BKW';
	ePiston.fwd:
		stateToString := 'FWD';
	ePiston.error:
		stateToString := 'ERROR';
	ePiston.off:
		stateToString := 'OFF';
	ePiston.running:
		stateToString :=concat('RUNNING ', sTask);
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="Piston">
      <LineId Id="711" Count="48" />
      <LineId Id="133" Count="0" />
    </LineIds>
    <LineIds Name="Piston.bkw">
      <LineId Id="8" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Piston.fwd">
      <LineId Id="8" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="9" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_bkw">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_fwd">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_off">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_riseError">
      <LineId Id="29" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_run">
      <LineId Id="44" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="2" />
      <LineId Id="54" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="66" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="72" Count="0" />
    </LineIds>
    <LineIds Name="Piston.M_SetState">
      <LineId Id="16" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="27" Count="1" />
    </LineIds>
    <LineIds Name="Piston.off">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="Piston.reset">
      <LineId Id="7" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="Piston.setTimers">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
    </LineIds>
    <LineIds Name="Piston.statesIndication">
      <LineId Id="1" Count="3" />
      <LineId Id="7" Count="1" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="Piston.stateToString">
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="8" />
      <LineId Id="24" Count="0" />
      <LineId Id="18" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>